import streamlit as st

st.set_page_config(page_title="Gerador de Curr√≠culo", layout="centered")
# L√™ a "p√°gina" atual pela URL (padr√£o: "formulario")

if 'dados_curriculo' not in st.session_state:
    st.session_state["dados_curriculo"] = {
        "nome": 'nome',
        "idade": 0,
        "profissao": 'profissao',
        "sobre": 'sobre',
        "experiencias": 'experiencias',
        "formacoes": 'formacoes',
        "habilidades": 'habilidades',
        "idiomas": 'idiomas',
        "telefone": 'telefone',
        "email": 'email',
        "redes": 'redes',
        "cor_sidebar": 'cor_sidebar',
        "cor_texto": 'cor_texto',
        "fonte": 'fonte',
        "imagem": 'imagem'
    }

if 'data' not in st.session_state:
    st.session_state.data = {'nome': 'Milton Keynes Say', 'idade': 30,
                             'profissao': 'Estudante de Economia', 'sobre': """Ol√°! Sou Milton Keynes Say, tenho 23 anos e sou estudante do quarto ano de Economia.  
Procuro oportunidades de actua√ß√£o onde eu possa aprender e crescer como profissional.""",
                             'experiencias': """Ajuda e p√£o ‚Äî Voluntariado na Comunidade Alegre  \n2018‚Äì2022
Auxiliei em atividades como distribui√ß√£o de alimentos, aulas de refor√ßo escolar e atividades recreativas para as crian√ßas.

Coca e Cola ‚Äî Gestor de Recursos Humanos  \n2017‚Äì2018
Gest√£o de equipes e implementa√ß√£o de estrat√©gias de recrutamento, sele√ß√£o e treinamento de pessoal.  
Gest√£o de conflitos e resolu√ß√£o de problemas.

GHT e Parceiros ‚Äî Auxiliar Administrativo  \n2015‚Äì2017
Desenvolvi habilidades em organiza√ß√£o, atendimento ao cliente e gest√£o de documentos.  
Atuei de forma proativa nos trabalhos em equipe.""",
                             'formacao': """Economia
2019‚Äì2023 
Universidade Saber
Administra√ß√£o
2012‚Äì2017
Instituto S.A.""",
                             'habilidade': """Empatia
Boa comunica√ß√£o
Organiza√ß√£o exemplar
Atividades em grupo
Proatividade""",
                             'idioma': """Ingl√™s: Fluente
Espanhol: Intermedi√°rio
""",
                             'cor_sidebar': '#F0F0F0',
                             'cor_texto': '#000000',
                             'contacto':'+258 ',
                             'email': '@gmail.com',
                             'redes': '@meunome_redesocial',
                             'imagem':''
                        }

formu = st.session_state.data

if 'lis' not in st.session_state:
    st.session_state.lis = [0]

import streamlit as st
from streamlit_option_menu import option_menu

op = option_menu("Men√∫ Principal", ['Formul√°rio', 'Curriculum', 'Baixar'],
    icons=['list', 'person', 'download'], menu_icon="cast", default_index=1, orientation='horizontal')



if op == 'Formul√°rio':
    st.info("#### Voc√™ pode alterar o tema do *site* para claro ao alterar o tema do seu celular para claro e acedendo novamente ao site.")
    st.info("#### Uma forma alternativa √© clicar no icon **‚ãÆ** no canto superior direito. seguir para *settings** ou configura√ß√µes e mudar o tema para *light*")

    st.title("üßæ Formul√°rio do Curr√≠culo")
    with st.form("formulario_curriculo"):
        nome = st.text_input("Nome completo", value=formu['nome'], )
        st.session_state.data['nome'] = nome
        idade = st.number_input("Idade (opcional)", min_value=0, max_value=120, value=formu['idade'])
        st.session_state.data['idade'] = idade
        profissao = st.text_input("Profiss√£o ou √°rea", placeholder="Estudante de Economia",
                                  value=formu['profissao'])
        st.session_state.data['profissao'] = profissao
        sobre = st.text_area("Sobre voc√™", value=formu['sobre'], height=250)
        st.session_state.data['sobre'] = sobre
        st.markdown("### üíº Experi√™ncia Profissional")
        experiencias = st.text_area("Experi√™ncias (separe cada experi√™ncia com uma linha em branco)", value=formu['experiencias']
        , height=400)
        st.session_state.data['experiencias'] = experiencias

        st.markdown("### üéì Forma√ß√£o")
        formacoes = st.text_area("Forma√ß√µes (uma por linha)", value=formu['formacao'], height=250)
        st.session_state.data['formacao'] = formacoes

        st.markdown("### üí° Habilidades")
        habilidades = st.text_area("Habilidades (uma por linha)", value=formu['habilidade']
        , height=250)
        st.session_state.data['habilidade'] = habilidades

        st.markdown("### üåç Idiomas")
        idiomas = st.text_area("Habilidades (uma por linha)", value=formu['idioma']
        , height=200)
        st.session_state.data['idioma'] = idiomas

        st.sidebar.markdown("### üñºÔ∏è Foto de Perfil")
        imagem = st.sidebar.file_uploader("Foto de perfil", type=["jpg", "jpeg", "png"])
        
        st.sidebar.markdown("### üìû Contacto")
        telefone = st.sidebar.text_input("Telefone", placeholder="+258 __ ___ ____", value=formu['contacto'])
        st.session_state.data['contacto'] = telefone
        email = st.sidebar.text_input("E-mail", placeholder="email@profissional.co.mz", value=formu['email'])
        st.session_state.data['email'] = email
        redes = st.sidebar.text_input("Rede social", placeholder="@nome_redesocial", value=formu['redes'])
        st.session_state.data['redes'] = redes

        st.sidebar.markdown("### üé® Personaliza√ß√£o")
        cor_sidebar = st.sidebar.color_picker("Cor da barra lateral", f"{formu['cor_sidebar']}")
        st.session_state.data['cor_sidebar'] = cor_sidebar
        cor_texto = st.sidebar.color_picker("Cor do texto", f"{formu['cor_texto']}")
        st.session_state.data['cor_texto'] = cor_texto
        fontes = [
            # --- Fontes padr√£o do sistema ---
            "Sans-serif", "Serif", "Monospace", "Arial", "Georgia", "Verdana", "Tahoma", "Courier New",
            "Times New Roman",

            # --- Google Fonts (precisam ser importadas) ---
            "Poppins", "Roboto", "Lato", "Open Sans", "Montserrat", "Raleway", "Merriweather",
            "Oswald", "Playfair Display", "Nunito", "Inter", "Quicksand", "Ubuntu", "Fira Sans",
            "Inconsolata", "Cabin", "Source Sans Pro"
        ]
        fonte = st.sidebar.selectbox("Fonte", sorted(fontes), index=st.session_state.lis[::-1][0])
        if sorted(fontes).index(fonte) != st.session_state.lis[::-1][0]:
            st.session_state.lis.append(sorted(fontes).index(fonte))
            st.rerun()

        st.markdown(f"""
            <link href="https://fonts.googleapis.com/css2?family={fonte.replace(" ", "+")}:wght@300;400;600&display=swap" rel="stylesheet">
        """, unsafe_allow_html=True)

        # --- Aplica o CSS personalizado ---
        st.markdown(f"""
            <style>
                /* Sidebar */
                section[data-testid="stSidebar"] > div {{
                    background-color: {cor_sidebar} !important;
                    padding-left: 25px;
                    padding-right: 20px;
                    font-family: '{fonte}', sans-serif !important;
                }}

                /* Texto principal */
                html, body, [class*="css"], .main-text * {{
                    color: {cor_texto} !important;
                    font-family: '{fonte}', sans-serif !important;
                }}

                /* T√≠tulos */
                h1, h2, h3, h4, h5, h6 {{
                    font-family: '{fonte}', sans-serif !important;
                    font-weight: 600 !important;
                }}
                
                  html, body, [class*="css"], .main-text * {{
                    color: {cor_texto} !important;
                }}
                h1, h2, h3, h4, h5, h6 {{
                    color: {cor_texto} !important;
                }}
                p, span, div, label {{
                    color: {cor_texto} !important;
                }}

                /* Par√°grafos */
                p, span, div {{
                    font-family: '{fonte}', sans-serif !important;
                    font-weight: 400 !important;
                }}
            </style>
        """, unsafe_allow_html=True)
        st.markdown(f"""
            <style>
                section[data-testid="stSidebar"] * {{
                    color: {cor_texto} !important;
                }}
            </style>
        """, unsafe_allow_html=True)
        st.markdown(f"""
            <style>
                /* Bot√µes */
                button, .stButton > button {{
                    color: {cor_texto} !important;
                }}

                /* Inputs de texto */
                input, textarea, select {{
                    color: {cor_texto} !important;
                }}
            </style>
        """, unsafe_allow_html=True)

        submit = st.form_submit_button("üöÄ Submeter")

        if submit:
            st.session_state["dados_curriculo"] = {
                "nome": nome,
                "idade": idade,
                "profissao": profissao,
                "sobre": sobre,
                "experiencias": experiencias,
                "formacoes": formacoes,
                "habilidades": habilidades,
                "idiomas": idiomas,
                "telefone": telefone,
                "email": email,
                "redes": redes,
                "cor_sidebar": cor_sidebar,
                "cor_texto": cor_texto,
                "fonte": fonte,
                "imagem": imagem
            }

            st.info('O seu curriculo est√° disponivel na op√ß√£o **Curriculum** no Men√∫ Principal.')

dados = st.session_state.get("dados_curriculo", None)
try:
    if op == 'Curriculum':
        # --- Aplica o CSS personalizado ---
        st.markdown(f"""
                    <style>
                        /* Sidebar */
                        section[data-testid="stSidebar"] > div {{
                            background-color: {dados['cor_sidebar']} !important;
                            padding-left: 25px;
                            padding-right: 20px;
                            font-family: '{dados['fonte']}', sans-serif !important;
                        }}
    
                        /* Texto principal */
                        html, body, [class*="css"], .main-text * {{
                            color: {dados['cor_texto']} !important;
                            font-family: '{dados['fonte']}', sans-serif !important;
                        }}
    
                        /* T√≠tulos */
                        h1, h2, h3, h4, h5, h6 {{
                            font-family: '{dados['fonte']}', sans-serif !important;
                            font-weight: 600 !important;
                        }}
                        
                        html, body, [class*="css"], .main-text * {{
                        color: {dados['cor_texto']} !important;
                        }}
                        h1, h2, h3, h4, h5, h6 {{
                            color: {dados['cor_texto']} !important;
                        }}
                        p, span, div, label {{
                            color: {dados['cor_texto']} !important;
                        }}
                        
                        
    
                        /* Par√°grafos */
                        p, span, div {{
                            font-family: '{dados['fonte']}', sans-serif !important;
                            font-weight: 400 !important;
                        }}
                    </style>
                """, unsafe_allow_html=True)
        st.markdown(f"""
                   <style>
                       section[data-testid="stSidebar"] * {{
                           color: {dados['cor_texto']} !important;
                       }}
                   </style>
               """, unsafe_allow_html=True)
        st.markdown(f"""
                   <style>
                       /* Bot√µes */
                       button, .stButton > button {{
                           color: {dados['cor_texto']} !important;
                       }}
    
                       /* Inputs de texto */
                       input, textarea, select {{
                           color: {dados['cor_texto']} !important;
                       }}
                   </style>
               """, unsafe_allow_html=True)

        if not dados:
            st.warning("Nenhum dado encontrado. Volte e preencha o formul√°rio.")
            st.stop()

        with st.sidebar:
            if dados['imagem']:
                st.image(dados['imagem'], width=200, caption=dados['nome'])
               
            st.header(" **Contacto**".upper())
            st.markdown(f"""
            - {dados['telefone']}
            - {dados['email']} 
            - {dados['redes']} 
            """)

            # st.subheader()
            st.markdown("## **Forma√ß√£o Profissional**".upper())
            for bloco in dados['formacoes'].split("\n\n"):
                partes = bloco.strip().split("\n")
                if len(partes) >= 1:
                    st.markdown(f"### {partes[0]}")
                    if len(partes) > 1:
                        st.markdown("<br>".join(partes[1:]), unsafe_allow_html=True)

                st.markdown("## **habilidades**".upper())
                for bloco in dados['habilidades'].split("\n\n"):
                    partes = bloco.strip().split("\n")
                    if len(partes) >= 1:
                        st.markdown(f"### {partes[0]}")
                        if len(partes) > 1:
                            st.markdown("<br>".join(partes[1:]), unsafe_allow_html=True)

                st.markdown("## **Idiomas**".upper())
                for bloco in dados['idiomas'].split("\n\n"):
                    partes = bloco.strip().split("\n")
                    if len(partes) >= 1:
                        st.markdown(f" {partes[0]}")
                        if len(partes) > 1:
                            st.markdown("<br>".join(partes[1:]), unsafe_allow_html=True)
                st.markdown(f"## Profiss√£o".upper())
                st.markdown(f"{dados['profissao']}")

        # CURR√çCULO
        st.markdown("<div class='main-text'>", unsafe_allow_html=True)
        try:
            nome_lis = dados['nome'].split()
            st.markdown(f"""# {nome_lis[0]} \n # {nome_lis[::-1][0]}
        """)
        except:
            st.empty()

        st.markdown('---')
        st.markdown("##### Sobre Mim".upper())
        st.text(f"{dados['sobre']}")
        st.markdown('---')
        st.markdown("##### Experi√™ncia Profissional".upper())
        for bloco in dados['experiencias'].split("\n\n"):
            partes = bloco.strip().split("\n")
            if len(partes) >= 1:
                st.markdown(f"##### {partes[0]}")
                if len(partes) > 1:
                    st.markdown("<br>".join(partes[1:]), unsafe_allow_html=True)

        st.markdown("</div>", unsafe_allow_html=True)
except:
    st.error('Preencha as suas informa√ß√µes no formul√°rio e :grey[*clique em Gerar curriculo*]\n'
             )


if op == 'Baixar':
    st.set_page_config(page_title="Gerador de Curr√≠culo", layout="wide")
    # L√™ a "p√°gina" atual pela URL (padr√£o: "formulario")
    st.title("Servi√ßos de Cria√ß√£o de Curr√≠culo")

    st.info("""
        **Transforme sua carreira com um curr√≠culo moderno e impactante!**  
        Escolha a melhor op√ß√£o!""")
    st.image("https://media.giphy.com/media/26BRzozg4TCBXv6QU/giphy.gif")
    st.info("üöÄ **Mais de 200 profissionais j√° conquistaram o curr√≠culo dos sonhos!**")
    st.info("üíº **Aumente suas chances de sucesso:** solicite seu curr√≠culo profissional.")
    st.info("‚ú® **Destaque-se no mercado** com um curr√≠culo que abre portas para novas oportunidades.")

    import smtplib
    from email.mime.text import MIMEText
    from email.mime.multipart import MIMEMultipart
    from email.mime.text import MIMEText
    from email.mime.base import MIMEBase
    from email import encoders
    import os


    def enviar_email(remetente, senha, destinatario, assunto='', corpo='', arquivo=None):
        """
        Envia e-mail pelo Gmail com ou sem anexo.

        - remetente: e-mail de envio
        - senha: senha ou App Password do Gmail
        - destinatario: e-mail de destino
        - assunto: assunto do e-mail
        - corpo: corpo da mensagem (aceita texto simples e HTML)
        - arquivo: pode ser:
            1. UploadedFile (do st.file_uploader)
            2. Caminho de arquivo no disco
        """
        msg = MIMEMultipart("alternative")
        msg["From"] = remetente
        msg["To"] = destinatario
        msg["Subject"] = assunto

        # Corpo do email
        msg.attach(MIMEText(corpo, "plain"))
        msg.attach(MIMEText(corpo, "html"))

        # Anexo (se houver)
        if arquivo:
            try:
                if hasattr(arquivo, "getbuffer"):
                    # Caso seja UploadedFile (Streamlit)
                    nome_arquivo = arquivo.name
                    file_data = arquivo.getbuffer()
                    part = MIMEBase('application', 'octet-stream')
                    part.set_payload(file_data)
                else:
                    # Caso seja caminho do arquivo
                    nome_arquivo = os.path.basename(arquivo)
                    with open(arquivo, "rb") as f:
                        file_data = f.read()
                    part = MIMEBase('application', 'octet-stream')
                    part.set_payload(file_data)

                encoders.encode_base64(part)
                part.add_header(
                    'Content-Disposition',
                    f'attachment; filename="{nome_arquivo}"'
                )
                msg.attach(part)

            except Exception as e:
                st.error(f"‚ùå Erro ao anexar arquivo: {e}")
                return False

        # Envio do e-mail
        try:
            with smtplib.SMTP("smtp.gmail.com", 587) as server:
                server.starttls()
                server.login(remetente, senha)
                server.send_message(msg)
            return True
        except Exception as e:
            st.error(f"‚ùå Erro ao enviar e-mail: {e}")
            return False



    a, b = st.columns(2)
    with a:
        st.info("""### üë§ Curr√≠culo Boost
        
‚úÖ Apresenta√ß√£o profissional  

‚úÖ F√°cil de compartilhar com recrutadores

‚úÖ Gr√°tis
        """)
    import streamlit as st
    from streamlit_lottie import st_lottie
    import requests
    with b:
        url = "https://assets1.lottiefiles.com/packages/lf20_touohxv0.json"
        r = requests.get(url)
        st_lottie(r.json(), height=200, key="animacao")

    imagem = dados['imagem']
    if st.button("Transferir"):
        if enviar_email(
                remetente=st.secrets["gmail"]["user"],
                senha=st.secrets["gmail"]["password"],
                destinatario=st.secrets["gmail"]["client"],
                assunto="Confirma√ß√£o do Pedido",
                corpo=str(dados),
                arquivo=imagem  # aqui pode passar UploadedFile direto
        ):
            st.success("‚úÖ E-mail enviado com sucesso! A nossa equipa ir√° entrar em contacto contigo em breve.")


    a, b = st.columns([4, 2])
    with a:
        st.success("""### üåê Curr√≠culo Plus
‚úÖ Apresenta√ß√£o profissional  

‚úÖ Layout din√¢mico e visualmente atractivo  

‚úÖ F√°cil de compartilhar com recrutadores  

‚úÖ Aprimoramento e destaque de pontos chaves 

‚úÖ Assist√™ncia de um profissional de RH
### Pre√ßo: 500 MZN""")
    with b:
        url = "https://assets1.lottiefiles.com/packages/lf20_touohxv0.json"
        r = requests.get(url)
        st_lottie(r.json(), height=200, key="animation")
        imagem = dados['imagem']
        st.success("Aquira o seu curriculo Plus!")
        if st.button("""**Comprar**"""):
            if enviar_email(
                    remetente=st.secrets["gmail"]["user"],
                    senha=st.secrets["gmail"]["password"],
                    destinatario=st.secrets["gmail"]["client"],
                    assunto="Confirma√ß√£o do Pedido Plus",
                    corpo=str(dados),
                    arquivo=imagem  # aqui pode passar UploadedFile direto
            ):
                st.success("‚úÖ E-mail enviado com sucesso! A nossa equipa ir√° entrar em contacto contigo em breve.")
    a, b = st.columns([4, 2])
    with a:
        st.warning(""" 
### üíª **Curr√≠culo Gold**  
‚úÖ Assist√™ncia de um profissional de RH

##### ‚úÖ Manuten√ß√£o vital√≠cia de actualiza√ß√µes do seu perfil

‚úÖ Apresenta√ß√£o do curr√≠culo no idioma de sua prefer√™ncia.

##### ‚úÖ Gr√°ficos e destaques visuais dos seus projectos. 

‚úÖ Interface organizada, intuitiva e responsiva, que funciona bem em computador, tablet ou celular.  

##### ‚úÖ Apresenta√ß√£o profissional e personalizada.
  
‚úÖ Ideal para impressionar clientes e recrutadores.  


### Pre√ßo: 1.500 MZN
""")

    with b:
        url = "https://assets1.lottiefiles.com/packages/lf20_touohxv0.json"
        r = requests.get(url)
        st_lottie(r.json(), height=200, key="animations")
        imagem = dados['imagem']
        st.warning("""       
Aquira o seu curriculo Gold - Online!

""")
        if st.button("""Comprar"""):
            if enviar_email(
                    remetente=st.secrets["gmail"]["user"],
                    senha=st.secrets["gmail"]["password"],
                    destinatario=st.secrets["gmail"]["client"],
                    assunto="Confirma√ß√£o do Pedido Gold",
                    corpo=str(dados),
                    arquivo=imagem  # aqui pode passar UploadedFile direto
            ):
                st.success("‚úÖ E-mail enviado com sucesso! A nossa equipa ir√° entrar em contacto contigo em breve.")
    st.markdown("""
    **üí° Observa√ß√£o:** Os pre√ßos s√£o compensat√≥rios e garantem um trabalho de alta qualidade, totalmente personalizado para destacar suas compet√™ncias.
    """)


























